//main.c
//Jacob Gray
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// make
// gcc -o collatz collatz.c
// (n is number of values to test)
// (min is minimum value to test)
// (max is maximum value to test)
// time ./collatz n min max method chache_size
// implement LRU and LFU cache

//Random Num
unsigned long long random_number(unsigned long long min, unsigned long long max)
{
    return min + (rand() % (max - min));
}

//collatz
unsigned collatz_r(unsigned long long candidate)
{
    if(candidate == 1)
    {
        return 0;
    }
    /*
    if(cache_has(candidate))
    {
        return cache_value_for(candidate);
    }
    */
    unsigned long long new_candidate;

    if(candidate % 2 == 0)
    {
        new_candidate = candidate / 2;
    }
    else
    {
        new_candidate = 3 * candidate + 1;
    }

    if(new_candidate == 1) return 1;

    unsigned count = 1 + collatz_r(new_candidate);
    //cache_insert(candidate, count);
    return count;
}

int main(int argc, char *argv[])
{
    unsigned long long n = atoi(argv[1]);
    unsigned long long min = atoi(argv[2]);
    unsigned long long max = atoi(argv[3]);
    unsigned long long method = 0;

    if(argc < 4 || argc == 5 || argc > 7)
    {
        printf("Invalid number of arguments\n");
        return 1;
    }
    else if(argc == 6)
    {
        method = 0;
    }

    for(int ix = 0;ix < n; ix++)
    {
        int current_number = random_number(min, max);
        int current_count = collatz_r(current_number);
        printf("Collatz of %d is %d\n", current_number, current_count);
    }
}
